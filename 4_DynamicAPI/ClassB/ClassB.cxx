#include"ClassB.h"
#include"Factory.h"
#include<iostream>

////////////////////////////////////////////////////////////////////////////////
ClassB::ClassB(){

}

////////////////////////////////////////////////////////////////////////////////
ClassB::~ClassB(){

}

////////////////////////////////////////////////////////////////////////////////
void ClassB::Method1(){
  std::cout << "Class B : Method 1 " << std::endl;
}
////////////////////////////////////////////////////////////////////////////////
void ClassB::Method2(){
  std::cout << "Class B : Method 2 " << std::endl;
}
////////////////////////////////////////////////////////////////////////////////
Base* ClassB::Construct(){
  return (Base*) new ClassB();
}

////////////////////////////////////////////////////////////////////////////////
//            Registering the construct method to the factory                 //
////////////////////////////////////////////////////////////////////////////////
extern "C"{
class proxy{
  public:
    proxy(){
      std::cout << "libClassB is Loaded " << std::endl;
      Factory::getInstance()->Add("ClassB",ClassB::Construct);
    }
};

proxy p;

}

